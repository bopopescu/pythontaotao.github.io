<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo-ytliangc</title>
  
  <subtitle>愿有岁月可回首，且以深情共白头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pythontaotao.github.io/"/>
  <updated>2020-07-04T07:55:34.149Z</updated>
  <id>https://pythontaotao.github.io/</id>
  
  <author>
    <name>ytlaingc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot项目部署到k8s集群</title>
    <link href="https://pythontaotao.github.io/2020/07/03/Springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4/"/>
    <id>https://pythontaotao.github.io/2020/07/03/Springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0k8s%E9%9B%86%E7%BE%A4/</id>
    <published>2020-07-03T19:50:55.000Z</published>
    <updated>2020-07-04T07:55:34.149Z</updated>
    
    <content type="html"><![CDATA[<p>Springboot项目部署到k8s集群</p><p>简介：该项目是使用Springboot框架开发的简单的考勤签到系统，依赖MySql数据库记录数据，能够实现注册、登陆、签到、修改个人信息，查看签到记录等功能</p><p>源码地址：<a href="https://github.com/pythonTaotao/kubernetes/tree/master/Project/HHUDBExam" target="_blank" rel="noopener">考勤签到Springboot项目</a></p><a id="more"></a><p>确定整个实现步骤</p><p><img src="https://i.loli.net/2020/07/04/eMzmQkAi5Wtr96X.png" alt="Snipaste_2020-07-04_15-06-50.png"></p><h2 id="将服务制作成基础镜像"><a href="#将服务制作成基础镜像" class="headerlink" title="将服务制作成基础镜像"></a>将服务制作成基础镜像</h2><p>1、该项目基于Java的Springboot框架开发，所以基础镜像使用 openjdk镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openjdk:8-jre-alpine</span><br></pre></td></tr></table></figure><p>2、使用mvn将该项目打包成jar包，需提前在服务器配置好Java和maven的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/04/OG5oJmiWcrI2uCR.png" alt="Snipaste_2020-07-04_15-12-16.png"></p><p>在<code>target/</code>下会生成<code>hhu-dbexam-0.0.1-SNAPSHOT.jar</code>的文件，可以先在本地测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar hhu-dbexam-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/04/O2YWvoFuxph7jSk.png" alt="Snipaste_2020-07-04_15-14-04.png"></p><p>3、使用Dockerfile构建docker，推送到我们的阿里云镜像仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat Dockerfile</span></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">COPY target/hhu-dbexam-0.0.1-SNAPSHOT.jar /hhu-dbexam-0.0.1-SNAPSHOT.jar</span><br><span class="line">ENTRYPOINT ["java","-jar","/hhu-dbexam-0.0.1-SNAPSHOT.jar"]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t springboot-web:v1 .</span></span><br></pre></td></tr></table></figure><h2 id="部署依赖服务MySQL"><a href="#部署依赖服务MySQL" class="headerlink" title="部署依赖服务MySQL"></a>部署依赖服务MySQL</h2><p>这里也是使用Pod进行部署，但未做数据持久化，下面是<code>mysql-rc.yaml</code>部署文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.c.163.com/library/mysql</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">"123456"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">msyql-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>修改代码中链接信息，使其能够连接数据库，url也要对应进行修改</p><p><img src="https://i.loli.net/2020/07/04/7GQeA1ICsHWJwdc.png" alt="Snipaste_2020-07-04_15-24-38.png"></p><p>创建对应的数据库和表，添加数据库字段</p><p> 学生信息表的设计如下：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>主键</th><th>是否非空</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>10</td><td>yes</td><td>yes</td></tr><tr><td>stuno</td><td>int</td><td>20</td><td>no</td><td>yes</td></tr><tr><td>name</td><td>varchar</td><td>30</td><td>no</td><td>yes</td></tr><tr><td>password</td><td>varchar</td><td>20</td><td>no</td><td>yes</td></tr><tr><td>classid</td><td>varchar</td><td>20</td><td>no</td><td>no</td></tr><tr><td>email</td><td>varchar</td><td>20</td><td>no</td><td>no</td></tr><tr><td>phone</td><td>varchar</td><td>30</td><td>no</td><td>no</td></tr></tbody></table><p>学生信息表的字段格式说明如下：</p><table><thead><tr><th>序号</th><th>学号</th><th>姓名</th><th>密码</th><th>班级</th><th>邮箱</th><th>电话</th></tr></thead><tbody><tr><td>01</td><td>1706010302</td><td>测试</td><td>123556</td><td>计算机六班</td><td><a href="mailto:12321@qq.com">12321@qq.com</a></td><td>1525252</td></tr></tbody></table><p>考勤记录表的设计如下：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>主键</th><th>是否为空</th></tr></thead><tbody><tr><td>id</td><td>inr</td><td>10</td><td>yes</td><td>yes</td></tr><tr><td>stuno</td><td>varchar</td><td>20</td><td>no</td><td>yes</td></tr><tr><td>name</td><td>varchar</td><td>30</td><td>no</td><td>yes</td></tr><tr><td>puch_intimr</td><td>datetime</td><td></td><td>no</td><td>yes</td></tr></tbody></table><p> 考勤记录表的字段格式说明如下：</p><table><thead><tr><th>序号</th><th>学号</th><th>姓名</th><th>签到时间</th></tr></thead><tbody><tr><td>01</td><td>1706010302</td><td>测试</td><td>2020-04-29  09:27:17</td></tr></tbody></table><p>下面是数据库导出的<code>hhu_dbexam.sql</code>文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Source Server         : 10.139.8.42</span></span><br><span class="line"><span class="comment">Source Server Version : 50718</span></span><br><span class="line"><span class="comment">Source Host           : 10.139.8.42:31645</span></span><br><span class="line"><span class="comment">Source Database       : hhu_dbexam</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Target Server Type    : MYSQL</span></span><br><span class="line"><span class="comment">Target Server Version : 50718</span></span><br><span class="line"><span class="comment">File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 2020-07-04 15:28:28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for punch_in</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`punch_in`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`punch_in`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`stuno`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`puch_intimr`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of punch_in</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for student</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`stuno`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`classid`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of student</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'176815'</span>, <span class="string">'张三'</span>, <span class="string">'123'</span>, <span class="string">'计算机1班'</span>, <span class="string">'9830666999@qq.com'</span>, <span class="string">'17688903055'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1111111'</span>, <span class="string">'李四'</span>, <span class="string">'123123'</span>, <span class="string">'1111'</span>, <span class="string">'11111@qq.com'</span>, <span class="string">'17688903066'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'123456'</span>, <span class="string">'李四'</span>, <span class="string">'123'</span>, <span class="string">'计算机1班'</span>, <span class="string">'888888@qq.com'</span>, <span class="string">'15971488899'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'111111'</span>, <span class="string">'王五'</span>, <span class="string">'123'</span>, <span class="string">'计算机2班'</span>, <span class="string">'1111@11.com'</span>, <span class="string">'18788899999'</span>);</span><br></pre></td></tr></table></figure><h2 id="制作k8s服务并调度"><a href="#制作k8s服务并调度" class="headerlink" title="制作k8s服务并调度"></a>制作k8s服务并调度</h2><p>这个项目我们需要使用web界面进行访问，我们使用deploment创建Pod，需要使用NodePort进行暴露或者Ingress域名访问服务</p><p> 下面是<code>springboot-web.yaml</code>部署文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/other_ns/springboot-web:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">springboot-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">springboot-web</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>部署上述文件后查看pod和service是否正常运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@vmlabmaster-dev HHUDBExam]# kubectl get po |grep springboot</span><br><span class="line">springboot-web-67f69d94f5-59wjh               1/1     Running   0          53s</span><br><span class="line">[root@vmlabmaster-dev HHUDBExam]# kubectl get svc | grep springboot-web</span><br><span class="line">springboot-web               NodePort    10.110.69.65     &lt;none&gt;        80:31706/TCP      59s</span><br></pre></td></tr></table></figure><p>我们访问 <a href="http://ip:31706访问我们的服务">http://ip:31706访问我们的服务</a></p><p><img src="https://i.loli.net/2020/07/04/ozrNU6ZfjB2QX4S.png" alt="Snipaste_2020-07-04_15-34-35.png"></p><p>至此，我们一个Springboot项目就完成在k8s上面的部署，总结一下流程，先找到基础镜像，在搞定运行的文件，然后将文件打包到镜像里面，最后在k8s上确定调度策略，部署服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Springboot项目部署到k8s集群&lt;/p&gt;
&lt;p&gt;简介：该项目是使用Springboot框架开发的简单的考勤签到系统，依赖MySql数据库记录数据，能够实现注册、登陆、签到、修改个人信息，查看签到记录等功能&lt;/p&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/pythonTaotao/kubernetes/tree/master/Project/HHUDBExam&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;考勤签到Springboot项目&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://pythontaotao.github.io/categories/kubernetes/"/>
    
    
      <category term="springboot" scheme="https://pythontaotao.github.io/tags/springboot/"/>
    
      <category term="容器化" scheme="https://pythontaotao.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
      <category term="k8s" scheme="https://pythontaotao.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm部署单master节点kubernetes集群</title>
    <link href="https://pythontaotao.github.io/2020/06/30/kubeadm%E9%83%A8%E7%BD%B2%E5%8D%95master%E8%8A%82%E7%82%B9kubernetes%E9%9B%86%E7%BE%A4/"/>
    <id>https://pythontaotao.github.io/2020/06/30/kubeadm%E9%83%A8%E7%BD%B2%E5%8D%95master%E8%8A%82%E7%82%B9kubernetes%E9%9B%86%E7%BE%A4/</id>
    <published>2020-06-30T22:59:06.000Z</published>
    <updated>2020-07-01T11:02:45.046Z</updated>
    
    <content type="html"><![CDATA[<p>Kubeadm 是一个官方推荐部署kubernetes工具，降低了部署难度，提高效率它提供了 <code>kubeadm init</code> 以及 <code>kubeadm join</code> 这两个命令作为快速创建 kubernetes 集群的最佳实践。kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是准备节点环境的工作。同样的，诸如安装各种各样的可有可无的插件，也不再它的负责范围</p><a id="more"></a><h2 id="一、各相关组件及机器环境"><a href="#一、各相关组件及机器环境" class="headerlink" title="一、各相关组件及机器环境"></a>一、各相关组件及机器环境</h2><p>OS：CentOS 7.6 x86_64</p><p>Container runtime：Docker-ce 19.03</p><p>Kubernetes：1.17.0</p><table><thead><tr><th>IP地址</th><th>主机名</th><th>角色</th><th>CPU</th><th>Memory</th></tr></thead><tbody><tr><td>192.168.100.150</td><td>master</td><td>master</td><td>&gt;=2c</td><td>&gt;=2G</td></tr><tr><td>192.168.100.156</td><td>node01</td><td>node</td><td>&gt;=2c</td><td>&gt;=2G</td></tr><tr><td>192.168.100.157</td><td>node02</td><td>node</td><td>&gt;=2c</td><td>&gt;=2G</td></tr></tbody></table><p>1、编辑Master和各node的/etc/hosts,使其能够使用主机名解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.100.150 master master </span><br><span class="line">192.168.100.156 node01 node01 </span><br><span class="line">192.168.100.157 node02 node02</span><br></pre></td></tr></table></figure><p>2、主机时间同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> chronyd.service </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status chronyd.service</span></span><br></pre></td></tr></table></figure><p>3、关闭防火墙和Selinux服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/selinux/config  </span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>4、禁用Swap虚拟内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> swapoff -a </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'s/.*swap.*/#&amp;/'</span> /etc/fstab</span></span><br></pre></td></tr></table></figure><h2 id="二、部署kubernetes集群"><a href="#二、部署kubernetes集群" class="headerlink" title="二、部署kubernetes集群"></a><strong>二、部署kubernetes集群</strong></h2><h3 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h3><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">官方安装教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://download.docker.com/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y docker-ce</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span></span><br></pre></td></tr></table></figure><p>配置docker镜像下载加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.josn</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": [ "https://registry.docker-cn.com" ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure><h3 id="2、配置内核参数"><a href="#2、配置内核参数" class="headerlink" title="2、配置内核参数"></a>2、配置内核参数</h3><p>将桥接的IPv4流量传递到iptables的链 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF </span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1 </span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="line">EOF </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl --system</span></span><br></pre></td></tr></table></figure><h3 id="3、配置国内kuberneetes的yum源"><a href="#3、配置国内kuberneetes的yum源" class="headerlink" title="3、配置国内kuberneetes的yum源"></a>3、配置国内kuberneetes的yum源</h3><p>由于网络原因，中国无法直接连接到google的网络，需要配置阿里云的yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] </span></span><br><span class="line">name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=1 </span><br><span class="line">repo_gpgcheck=1 </span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="4、安装kubectl、kubeadm、kubelet"><a href="#4、安装kubectl、kubeadm、kubelet" class="headerlink" title="4、安装kubectl、kubeadm、kubelet"></a>4、安装kubectl、kubeadm、kubelet</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum install -y kubelet-1.17.0 kubeadm-1.17.0 kubectl-1.17.0</span><br><span class="line">[root@node01 ~]# yum install -y kubelet-1.17.0 kubeadm-1.17.0</span><br></pre></td></tr></table></figure><p>Kubelet负责与其他节点集群通信，并进行本节点Pod和容器生命周期的管理。</p><p>温馨提示：如果yum安装提示找不到镜像之类的，请yum makecache更新下yum源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl daemon-reload </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> kubelet     <span class="comment">#master和node节点设置开机自启动kubelet</span></span></span><br></pre></td></tr></table></figure><h3 id="5、初始化集群，在master上执行kubeadm-init"><a href="#5、初始化集群，在master上执行kubeadm-init" class="headerlink" title="5、初始化集群，在master上执行kubeadm init"></a>5、初始化集群，在master上执行kubeadm init</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubeadm init --kubernetes-version=1.17.0 \</span><br><span class="line">--apiserver-advertise-address=192.168.110.156. \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \ </span><br><span class="line">--service-cidr=10.96.0.0/12 \ </span><br><span class="line">--pod-network-cidr=10.244.0.0/16  </span><br><span class="line"></span><br><span class="line">//以下是执行完毕后输出的部分信息 Your Kubernetes control-plane has initialized successfully!  </span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:  </span><br><span class="line"></span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  </span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config  </span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster. Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  </span><br><span class="line"></span><br><span class="line">https://kubernetes.io/docs/concepts/cluster-administration/addons/  </span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:  </span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.100.156:6443 --token cxins6.pxbyomo4pp1mnrao \   </span><br><span class="line">--discovery-token-ca-cert-hash sha256:35876ef6f2e5fe7eb5c7bb709dbd5e09d0e9e7d3adf41cbe708eec4fb586c8d6</span><br></pre></td></tr></table></figure><ul><li><p>–kubernetes-version 正在使用的Kubernetes程序组件的版本号，需要与kubelet 的版本号相同 </p></li><li><p>–pod-network-cidr : Pod网络的地址范围，其值为CIDR格式的网络地址；使用flannel网络插件时，其默认地址为10.244.0.0/16 </p></li><li><p>–service-cidr: Service 的网络地址范围，其值为CIDR格式的网络地址，默认地址为10.96.0.0/12 </p></li><li><p>–apiserver-advertise-address : API server通告给其他组件的IP地址 ，一般应该为Master节点的 IP 地址，0.0.0.0 表示节点上所有可用的地址选择其中一个 </p><p>使用systemd作为docker的cgroup driver可以确保服务器节点在资源紧张的情况更加稳定，因此这里修改各个节点上docker的cgroup driver为systemd。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建或修改/etc/docker/daemon.json： </span></span><br><span class="line">&#123; </span><br><span class="line">"exec-opts": ["native.cgroupdriver=systemd"] </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重启docker： $ systemctl restart docker </span></span><br><span class="line"><span class="meta">#</span><span class="bash">验证 docker info | grep Cgroup </span></span><br><span class="line">Cgroup Driver: systemd</span><br></pre></td></tr></table></figure><h3 id="6、配置kubectl工具"><a href="#6、配置kubectl工具" class="headerlink" title="6、配置kubectl工具"></a>6、配置kubectl工具</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@K8sMaster ~]# mkdir -p /root/.kube </span><br><span class="line">[root@K8sMaster ~]# sudo cp /etc/kubernetes/admin.conf /root/.kube/config  [root@K8sMaster ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">[root@K8sMaster ~]# kubectl get cs </span><br><span class="line">NAME                STATUS  MESSAGE       </span><br><span class="line">ERROR etcd-0        Healthy  &#123;"health":"true"&#125;  </span><br><span class="line">controller-manager  Healthy  ok         </span><br><span class="line">scheduler           Healthy  ok</span><br></pre></td></tr></table></figure><p> 上面的STATUS结果为”Healthy”，表示组件处于健康状态，否则需要检查错误，如果排除不了问题，可以使用”kubeadm reset” 命令重置集群后重新初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes </span><br><span class="line">NAME     STATUS    ROLES   AGE  VERSION </span><br><span class="line">master   NotReady  master  10m  v1.17.0</span><br></pre></td></tr></table></figure><p>此时的Master处于”NotReady”（未就绪），因为集群中尚未安装网络插件，部署完网络后会ready,下面部署flannel</p><h3 id="7、部署flannel网络"><a href="#7、部署flannel网络" class="headerlink" title="7、部署flannel网络"></a>7、部署flannel网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure><p>下面看下集群的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get nodes </span></span><br><span class="line">NAME    STATUS  ROLES   AGE  VERSION </span><br><span class="line">master  Ready   master  17m  v1.17.0</span><br></pre></td></tr></table></figure><p>集群处于Ready状态，node节点可以加入集群中</p><h3 id="8、node节点加入集群"><a href="#8、node节点加入集群" class="headerlink" title="8、node节点加入集群"></a>8、node节点加入集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]# kubeadm join 192.168.100.156:6443 --token 2dt1wp.oudskargctjss991 \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:15aa0537c14d50df4fc9f45b6bdff0c30f8ef7114463a12e022e33619936266c  </span><br><span class="line"></span><br><span class="line">//以下是部分输出信息  </span><br><span class="line"></span><br><span class="line">This node has joined the cluster: * Certificate signing request was sent to apiserver and a response was received. * The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>执行完毕后稍等一会，在主节点上查看集群的状态，到这里我们一个最简单的包含最核心组件的集群搭建完毕！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME       STATUS   ROLES   AGE    VERSION </span><br><span class="line">master     Ready    master  34m    v1.17.0 </span><br><span class="line">node01     Ready    &lt;none&gt;  6m14s  v1.17.0</span><br><span class="line">node02     Ready    &lt;none&gt;  6m8s   v1.17.0</span><br></pre></td></tr></table></figure><h2 id="三、安装其他附件组件"><a href="#三、安装其他附件组件" class="headerlink" title="三、安装其他附件组件"></a><strong>三、安装其他附件组件</strong></h2><h3 id="1、查看集群的版本"><a href="#1、查看集群的版本" class="headerlink" title="1、查看集群的版本"></a>1、查看集群的版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> kubectl version --short </span></span><br><span class="line">Client Version: v1.14.3 </span><br><span class="line">Server Version: v1.14.3</span><br></pre></td></tr></table></figure><h3 id="2、安装dashboard，使用UI界面管理集群"><a href="#2、安装dashboard，使用UI界面管理集群" class="headerlink" title="2、安装dashboard，使用UI界面管理集群"></a>2、安装dashboard，使用UI界面管理集群</h3><p>创建dashboard的yaml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure><p>修改部分配置文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -i <span class="string">'s/k8s.gcr.io/loveone/g'</span> kubernetes-dashboard.yaml $ sed -i <span class="string">'/targetPort:/a\ \ \ \ \ \ nodePort: 30001\n\ \ type: NodePort'</span> kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure><p>部署dashboard</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl create -f kubernetes-dashboard.yaml </span><br><span class="line">secret/kubernetes-dashboard-certs created </span><br><span class="line">serviceaccount/kubernetes-dashboard created </span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created deployment.apps/kubernetes-dashboard created service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure><p>创建完成后，检查各服务运行状态 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get deployment kubernetes-dashboard -n kube-system</span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-dashboard   1/1     1            1           89s</span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl get services -n kube-system</span><br><span class="line">NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   61m</span><br><span class="line">kubernetes-dashboard   NodePort    10.102.234.209   &lt;none&gt;        443:30001/TCP            16m</span><br><span class="line">[root@master ~]# netstat -ntlp|grep 30001</span><br><span class="line">tcp6       0      0 :::30001                :::*                    LISTEN      17306/kube-proxy</span><br></pre></td></tr></table></figure><p>使用Firefox浏览器输入Dashboard访问地址：<a href="https://192.168.100.156:30001" target="_blank" rel="noopener">https://192.168.100.156:30001</a> </p><p>这里使用其他如chrome会提示安全问题无法连接！！！</p><p>查看访问Dashboard的token</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl create serviceaccount  dashboard-admin -n kube-system</span><br><span class="line">serviceaccount/dashboard-admin created</span><br><span class="line">[root@master ~]# kubectl create clusterrolebinding  dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created</span><br><span class="line">[root@master ~]# kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/&#123;print $1&#125;')</span><br><span class="line">Name:         dashboard-admin-token-9hglw</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: dashboard-admin</span><br><span class="line">              kubernetes.io/service-account.uid: 30efdd50-92bd-11e9-91e3-000c296bd9bc</span><br><span class="line"> </span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"> </span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tOWhnbHciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiMzBlZmRkNTAtOTJiZC0xMWU5LTkxZTMtMDAwYzI5NmJkOWJjIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.Bg9FOIr6RkepjCFav8tbkbTALGEX7bZJMNOYMOrYhFPhnhCs1RSxop7pCGBtdjug_Zpsb9UJ1WNWTsCInUlMYtSHkbaqVLZQEdIgD6jGb177CxIZBcCuxmxxQm0JMJdYjc6Y_1wYSTJGHtmWOHa70pUEcKo9I0LonTUfHCZh5PgS3JrwiTrsqe1RGyz3Jz4p9EIVPfcxmKCowSuapinOTezAWK2XAUhk2h5utXgag6RRnrPcHtlncZzW5fMTSfdAZv5xlaI64AM__qiwOTqyK-14xkda5nbk9DGhN5UwhkHzyvU6ApGT7A9Tr3j3QkMov9gEyVIDbSbBaSj8xBt36Q</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDcvMDEvb2FSZVRWbVo0RUhsd1k4LnBuZw?x-oss-process=image/format,png" alt="k8sdashboardlogin.png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDcvMDEveGs3ZWZtamJPeXFWRlQ2LnBuZw?x-oss-process=image/format,png" alt="k8sdashboardweb.png"></p><h3 id="3、重置集群初始状态"><a href="#3、重置集群初始状态" class="headerlink" title="3、重置集群初始状态"></a>3、重置集群初始状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h2 id="四、检查集群功能"><a href="#四、检查集群功能" class="headerlink" title="四、检查集群功能"></a><strong>四、检查集群功能</strong></h2><h3 id="1、测试DNS功能"><a href="#1、测试DNS功能" class="headerlink" title="1、测试DNS功能"></a>1、测试DNS功能</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl  apply -f dns-test-busybox.yaml </span><br><span class="line"></span><br><span class="line">kubectl exec -ti busybox -- nslookup kubernetes.default</span><br></pre></td></tr></table></figure><p><code>dns-test-busybox.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox:1.28</span>          <span class="comment">#注意这个busybox的版本是个坑</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3600"</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><h3 id="2、部署一个Nginx应用"><a href="#2、部署一个Nginx应用" class="headerlink" title="2、部署一个Nginx应用"></a>2、部署一个Nginx应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl apply -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure><p><code>nginx-deployment.yaml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 88</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: NodePort</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubeadm 是一个官方推荐部署kubernetes工具，降低了部署难度，提高效率它提供了 &lt;code&gt;kubeadm init&lt;/code&gt; 以及 &lt;code&gt;kubeadm join&lt;/code&gt; 这两个命令作为快速创建 kubernetes 集群的最佳实践。kubeadm 通过执行必要的操作来启动和运行一个最小可用的集群。它被故意设计为只关心启动集群，而不是准备节点环境的工作。同样的，诸如安装各种各样的可有可无的插件，也不再它的负责范围&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://pythontaotao.github.io/categories/kubernetes/"/>
    
    
      <category term="kubeadm" scheme="https://pythontaotao.github.io/tags/kubeadm/"/>
    
      <category term="kubernetes部署" scheme="https://pythontaotao.github.io/tags/kubernetes%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes基础概念入门</title>
    <link href="https://pythontaotao.github.io/2020/06/29/kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/"/>
    <id>https://pythontaotao.github.io/2020/06/29/kubernetes%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E5%85%A5%E9%97%A8/</id>
    <published>2020-06-30T01:13:55.000Z</published>
    <updated>2020-06-30T13:16:21.404Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications.</p><p>k8s是一个开源的云操作系统，能够用来自动化部署，扩缩容和管理我们的容器应用，简单来说，就是提供了容器编排和管理功能的系统</p><a id="more"></a><h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvSHRUR0U5TllLYjZja3kyLnBuZw?x-oss-process=image/format,png" alt="u_325710987,885711381_fm_26_gp_0.jpg"></p><p><strong>Master：</strong></p><ul><li>ApiServer：提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li><li>Scheduler：负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li><li>Controller-Manager：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li><li>ETCD：保存了整个集群的所有信息；</li></ul><p><strong>node：</strong></p><ul><li>Kubelet ：负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；</li><li>docker：负责镜像管理以及Pod和容器的真正运行（CRI）；</li><li>kubeproxy：负责为Service提供cluster内部的服务发现和负载均衡；</li></ul><p><strong>核心附件：</strong></p><ul><li>CoreDNS：负责为整个集群提供DNS服务</li><li>Dashboard：提供一个简单的GUI界面来查看集群信息和操作集群</li><li>Ingress：为服务提供外网入口，提供域名访问服务功能</li><li>Flannel：为集群之间提供网络连接服务，分配pod和serviceIP功能</li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h1><ol><li><p><strong>容器</strong>：一种轻量级、可移植、自包含的软件打包技术</p></li><li><p><strong>Master</strong>：为用户可和服暴露API，以最优方式调度工作负载，编排其他组件</p></li><li><p><strong>Pod</strong>: k8s最小调度单位，封装了一个或者多个容器的资源对象，Pod内所有容器共享命名空间和存储资源，类比<u><strong>豌豆荚</strong></u>  </p></li><li><p><strong>资源标签</strong>：一个键值型（key/value）数据，辨别pod的属性，或者帮助Scheduler来进行调度</p></li><li><p><strong>标签选择器</strong>： Lable Selector，根据标签过滤符合条件的资源对象</p></li><li><p><strong>namespace</strong>：资源对象的隔离，Service、Deployment、Pod</p></li><li><p><strong>Volume</strong>：存储卷，独立于容器文件系统的存储空间，为容器提供持久存储能力</p></li><li><p><strong>Pod控制器</strong>：用户不会直接部署管理pod，借助另一个抽象的工具【控制器(control) 】进行管理，保证副本数量达到预期</p></li></ol><p>以下是Control的类型和功能列表</p><table><thead><tr><th>类型</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>ReplicationController</td><td>保证Pod的副本数达到预期</td><td>几乎废弃</td></tr><tr><td>ReplicaSet</td><td>新一代RC，支持基于集合的标签选择器</td><td>新一代控制器</td></tr><tr><td>Deployment</td><td>是最常用的管理无状态的pod，构建于RS之上</td><td>支持基于集合（ set-based ）的标签选择器，以及它的滚动更新（ Rolling-Update ）机制,区别于RS的地方</td></tr><tr><td>StatefulSet</td><td>有状态的持久化应用，如database，为每个Pod创建独特标识，确保Pod间顺序性</td><td></td></tr><tr><td>DaemonSet</td><td>用于确保每个节点都运行某Pod的一个副本，新增节点也会被添加此类Pod,用于运行集群存储守护进程，如ceph和glusterd,日志收集进程fluentd、logstash以及监控进程，prometheus的Node Exporter等</td><td></td></tr><tr><td>Job</td><td>运行完成后可终止的应用，如批处理作业任务</td><td></td></tr></tbody></table><ol start="9"><li><strong>命名空间</strong></li></ol><p>作用：资源配额的隔离：CPU、Memory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespace</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   28d</span><br><span class="line">kube-public       Active   28d</span><br><span class="line">kube-system       Active   28d</span><br></pre></td></tr></table></figure><p>创建一个命名空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat namesapce-dev.yaml </span></span><br><span class="line">apiVersion: v1 </span><br><span class="line">kind: Namespace </span><br><span class="line">metadata:  </span><br><span class="line">  name: dev </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl create -f namesapce-dev.yaml</span></span><br></pre></td></tr></table></figure><p>简单命令创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns dev</span><br><span class="line"></span><br><span class="line">kubectl get all -n kube-system    #查看一个命名空间下所有的内容</span><br></pre></td></tr></table></figure><blockquote><p>注意：不同命名空间下SvcIP、PodIP是可以访问的,是对名字的隔离    </p></blockquote><h2 id="k8s服务、网络、存储概念"><a href="#k8s服务、网络、存储概念" class="headerlink" title="k8s服务、网络、存储概念"></a>k8s服务、网络、存储概念</h2><h3 id="Service概念"><a href="#Service概念" class="headerlink" title="Service概念"></a><strong>Service概念</strong></h3><p>​    Service 是建立在一组Pod 对象之上的资源抽象，它通过标签选择器选定一组Pod 对象，并为这组Pod 对象定义一个统一的固定访问入口（通常是一个IP 地址），若K8s 集群存在DNS 附件，它就会在Service 创建时为其自动配置一个DNS 名称以便客户端进行服务发现。到达Service IP 的请求将被负载均衡至其后的端点一一各个Pod 对象之上，Service从本质上来讲是一个<strong>四层</strong>代理服务。另外，Service 还可以将集群外部流量引入到集群中来。</p><h3 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a><strong>Service类型</strong></h3><ul><li><p><strong>第一种</strong>是仅用于集群内部通信的ClusterIP类型；</p></li><li><p><strong>第二种</strong>是接入集群外部请求的NodePort 类型它工作于每个节点的主机IP 之上；</p></li><li><p><strong>第三种</strong>是LoadBalancer 类型，可以把外部请求负载均衡至多个Node 的主机IP 的NodePort 之上</p><p>此三种类型中，每一种都以其前一种为基础才能实现，而且第三种类型中的LoadBalancer 需要协同集群外部的组件才能实现，此外部组件并不接受Kubemetes的管理。</p></li><li><p><strong>第四种</strong>是ExternalName,通过将Service映射由ExternalName字段的内容指定的主机名来暴露服务</p></li></ul><blockquote><p> Service IP 是一种虚拟IP ，也称为Cluster IP ，它专用于集群内通信，通常使用专用的地址段，如“ 10.96.0.0/12 ”网络     PodIP常用: 10.244.0.0/16</p><p>Ingress：Pod和service都只能在集群内部通信，Ingress可以实现HTTPS（七层）负载均衡，实现和集群外部通信，本身是一组路由规则的集合，其控制器主要使用<strong>Nginx</strong>，或者haproxy</p><p>HostPort和NodePort的区别：NodetPort是通过所有节点暴露容器服务，而HostPort由Pod对象所在的节点IP地址来暴露</p></blockquote><h3 id="k8s集群的网络"><a href="#k8s集群的网络" class="headerlink" title="k8s集群的网络"></a>k8s集群的网络</h3><p><strong>目的：</strong></p><p>所有Pod之间不需要经过NAT直接通信，都在一个扁平的网络空间内</p><p>所有集群内节点可不经过NAT机制直接和所有容器进行通信</p><p><strong>分类：</strong>          </p><ol><li><p>各主机自身的网络，地址配置于主机网络接口，配置于k8s集群构建之前，不能由k8s管理</p></li><li><p>k8s集群专用于pod资源对象的虚拟网络，配置在Pod的容器接口上，为Pod设定IP和网络，借助于CNI插件实现，可部署k8s集群之外或者托管在集群上，需要在构建集群有管理员定义</p></li><li><p>专用于service资源对象的虚拟网络，不配置在任何主机或者容器的网络接口，通过node的kube-proxy配置为iptables或者ipvs规则，网络在集群创建时指定</p></li></ol><h3 id="Kubernetes-资源对象"><a href="#Kubernetes-资源对象" class="headerlink" title="Kubernetes 资源对象"></a>Kubernetes 资源对象</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>工作负载( Workload ）</strong></td><td>通常称为pod 控制器，主要分为有状态、无状态</td></tr><tr><td><strong>发现和负载均衡（ Discovery &amp; LB ）</strong></td><td>Ingress（七层负载均衡）</td></tr><tr><td><strong>配置和存储（ Config &amp; Storage ）</strong></td><td>挂载外部存储卷</td></tr><tr><td><strong>集群( Cluster ）资源</strong></td><td>Node、Role、ClusterRole、RoleBinding、 ClusterRoleBinding</td></tr><tr><td><strong>元数据（ Metadata ）</strong></td><td>具有kind 、apiVersion 、metadata 、spec 和status 五个一级宇段</td></tr></tbody></table><p>资源类型（ resource type ）是指在URL 中使用的名称，如Pod 、Namespace 和Service等，其URL 格式为“ GROUPNERSION度ESOURCE ”，如apps/v1/deployment 。</p><ul><li><p><em>apiVersion</em>  版本号，例如 v1</p></li><li><p><em>kind</em> 代表着资源对象所属的类 Pod/Deployment/Service/Namespace</p></li><li><p><em>metadata</em> 字段为资源提供元数据信息，如名称、隶属的名称空间和标签等；</p></li><li><p><em>spec</em> 则用于定义用户期望的状态，不同的资源类型，其状态的意义也各有不同</p></li><li><p><em>status</em> 则记录着活动对象的当前状态信息，它由Kubemetes 系统自行维护，对用户来说为只读字段</p></li></ul><blockquote><p>如果是YAML 格式的清单文件，多个资源彼此之间要使用—</p><p>单独的一行进行资源分割，这样，多个资源就将以清单文件中定义的次序被create 、apply等子命令调用</p><p>kubectl api-versions 查看现有api的版本</p></blockquote><h2 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a><strong>kubectl常用命令</strong></h2><h3 id="kubectl-的命令分类："><a href="#kubectl-的命令分类：" class="headerlink" title="kubectl 的命令分类："></a>kubectl 的命令分类：</h3><table><thead><tr><th>类型</th><th>命令</th></tr></thead><tbody><tr><td><strong>陈述式命令</strong>（ imperative command ）</td><td>run , expose 、delete 和get 等命令</td></tr><tr><td><strong>陈述式对象配置</strong>（ imperative object configuration ）</td><td>create 、delete 、get 、describe和replace</td></tr><tr><td><strong>声明式对象配置</strong>（ declarative object config uration )</td><td>apply</td></tr></tbody></table><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvRVJnM1lHajF1VVpURm5OLnBuZw?x-oss-process=image/format,png" alt="kubectl命令1.png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvMTl6NThyb0xiNGtVRjZnLnBuZw?x-oss-process=image/format,png" alt="kubectl命令2.png"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMzAvbHRqS29QNlJ3T2dXR2U3LnBuZw?x-oss-process=image/format,png" alt="kubectl命令3.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个nginx的deployment</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run nginx-deploy --image=nginx:1.12 --port=80 --replicas=2</span></span><br><span class="line"></span><br><span class="line">2、对nginx-deploy进行扩缩容</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl scale deploy/nginx-deploy --replicas=3</span></span><br><span class="line"></span><br><span class="line">3、对nginx-deploy进行服务端口暴露,通过Service的8080端口转发至容器的80端口上</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment nginx-deploy --port=8080 --target-port=80</span></span><br><span class="line"></span><br><span class="line">4、将nginx-deploy暴露为NortPort</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl expose deployment nginx-deploy --<span class="built_in">type</span>=<span class="string">"NodePort"</span> --port=80 --name=my_nginx_web</span></span><br><span class="line"></span><br><span class="line">5、打印容器日志</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl logs coredns-7b47bbb54c-q6dkr -n kube-system -f</span></span><br><span class="line">.:53</span><br><span class="line">[INFO] plugin/reload: Running configuration MD5 = 1588bb3af386f386c40674040e2b3399</span><br><span class="line">   ______                ____  _   _______</span><br><span class="line">  / ____/___  ________  / __ \/ | / / ___/      ~ CoreDNS-1.6.3</span><br><span class="line"> / /   / __ \/ ___/ _ \/ / / /  |/ /\__ \       ~ linux/amd64, go1.12.9, 37b9550</span><br><span class="line">/ /___/ /_/ / /  /  __/ /_/ / /|  /___/ /</span><br><span class="line">\____/\____/_/   \___/_____/_/ |_//____/</span><br><span class="line"></span><br><span class="line">-f 用于持续监控指定容器中的日志输出,类似于tail -f</span><br><span class="line"></span><br><span class="line">6、进入容器执行命令</span><br><span class="line">格式: kubectl exec -it &lt;Pod-name&gt; /bin/bash  </span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器，如果一个pod里面有多个容器加 -c &lt;container name&gt; 指定容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl <span class="built_in">exec</span> -it nginx-deploy-64c7978669-2x5xz -n kube-system /bin/bash</span></span><br><span class="line"></span><br><span class="line">7、删除某个命名空间所有pod</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl delete pods --all -n kube-public</span></span><br><span class="line"></span><br><span class="line">8、查看版本</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl version --short       <span class="comment">#查看版本，也可以使用kubectl get node查看</span></span></span><br><span class="line"></span><br><span class="line">Client Version: v1.15.0 </span><br><span class="line">Server Version: v1.15.0</span><br><span class="line"></span><br><span class="line">9、运行一个测试容器</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run client --image=busybox --restart=Never -it -- /bin/sh</span></span><br><span class="line"></span><br><span class="line">10、命令的测试运行，选项--dry-run</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl run nginx-deploy --image=nginx:1.12 --port=80 --replicas=2 --dry-run</span></span><br><span class="line"></span><br><span class="line">11、给指定节点打标签</span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl label nodes master disktype=ssd</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes (K8s) is an open-source system for automating deployment, scaling, and management of containerized applications.&lt;/p&gt;
&lt;p&gt;k8s是一个开源的云操作系统，能够用来自动化部署，扩缩容和管理我们的容器应用，简单来说，就是提供了容器编排和管理功能的系统&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://pythontaotao.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://pythontaotao.github.io/tags/kubernetes/"/>
    
      <category term="基础概念" scheme="https://pythontaotao.github.io/tags/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建个人博客</title>
    <link href="https://pythontaotao.github.io/2020/06/28/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://pythontaotao.github.io/2020/06/28/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-06-28T23:44:13.000Z</published>
    <updated>2020-06-29T11:55:36.972Z</updated>
    
    <content type="html"><![CDATA[<p>前言：搭建个人博客也是心血来潮，很久之前就看到别人的博客很清新、简约、大气、时尚又装逼，嘿嘿。。。就想着自己折腾一个，奈何当时技术能力有限，连github都玩不转，当然以失败告终，最近又头脑发热，遂百度了n多资料，又开始了填（bei）坑(nue）之旅，而且能找到的资料大多仅仅就是搭建起来，作为一个强迫症患者，肯定不能忍受没有优化过的样子，所以本着搭建一个完整的博客并记录优化过程，如果你喜欢我博客的样子，参考此教程一定能够搭建起来差不多的样子。</p><p>我的博客：<a href="https://pythontaotao.github.io/">https://pythontaotao.github.io/</a></p><a id="more"></a><p><strong>什么是hexo?</strong></p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><ul><li><p>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</p></li></ul><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">win 10下载v 14.4.0</a>            <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">win 7下载v 12.18.0</a></p><p> 安装时，请勾选Add to PATH选项，其他步骤不明白可以百度安装教程<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvNERrcXVTeTdaMWpUMllSLnBuZw?x-oss-process=image/format,png" alt="version.png">  </p><p>查询版本如上，说明安装OK</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>npm是NodeJS包管理工具，类似于python的pip</p><h1 id="在本地搭建个人站点"><a href="#在本地搭建个人站点" class="headerlink" title="在本地搭建个人站点"></a>在本地搭建个人站点</h1><p>4.1、新建一个文件夹，位置和名称都没有限制，我们这里新建D:/hexo</p><p>4.2、使用git的命令行工具，初始化文件夹（选中hexo文件夹，右键Git Bash Here）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init hexo</span></span><br><span class="line">输出信息如下</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">Cloning into 'D:\hexo-new'...</span><br><span class="line">remote: Enumerating objects: 165, done.</span><br><span class="line">remote: Total 165 (delta 0), reused 0 (delta 0), pack-reused 165</span><br><span class="line">Receiving objects: 100% (165/165), 31.30 KiB | 124.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (79/79), done.</span><br><span class="line">Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'</span><br><span class="line">Cloning into 'D:/hexo-new/themes/landscape'...</span><br><span class="line">remote: Enumerating objects: 4, done.</span><br><span class="line">remote: Counting objects: 100% (4/4), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 1067 (delta 0), reused 0 (delta 0), pack-reused 1063</span><br><span class="line">Receiving objects: 100% (1067/1067), 3.22 MiB | 27.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (585/585), done.</span><br><span class="line">Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class="line">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ejs@2.7.4 postinstall D:\hexo-new\node_modules\ejs</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node ./postinstall.js</span></span><br><span class="line"></span><br><span class="line">Thank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)</span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules\chokidar\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"win32","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">added 253 packages from 450 contributors in 30.278s</span><br><span class="line"></span><br><span class="line">5 packages are looking for funding</span><br><span class="line">  run `npm fund` for details</span><br><span class="line"></span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy #需要部署的文件</span><br><span class="line">├── node_modules #Hexo插件</span><br><span class="line">├── public #生成的静态网页文件</span><br><span class="line">├── scaffolds #模板</span><br><span class="line">├── source #博客正文和其他源文件, 404 favicon CNAME 等都应该放在这里</span><br><span class="line">| ├── _drafts #草稿</span><br><span class="line">| └── _posts #文章</span><br><span class="line">├── themes #主题</span><br><span class="line">├── _config.yml #全局配置文件</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>初始化完成后会看到有以上文件内容，就是我们博客的初始化文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm install=npm i。在git clone项目的时候，项目文件中并没有 node_modules文件夹，项目的依赖文件可能很大。直接执行，npm会根据package.json配置文件中的依赖配置下载安装</span><br></pre></td></tr></table></figure><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。</p><p>4.3、在本地进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line">Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</span><br></pre></td></tr></table></figure><p>在浏览器输入<a href="http://localhost:4000，可以看到hexo博客最原始的样子">http://localhost:4000，可以看到hexo博客最原始的样子</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvWTdHSjJMeG1zMWE0clNDLnBuZw?x-oss-process=image/format,png" alt="bokechushihua.png"></p><p>4.4、hexo相关指令讲解（熟悉的小伙伴可以跳过这里）</p><p>a、<strong>init</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>b、<strong>new</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><p>c、 <strong>generate</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate      生成静态文件。简写 $ hexo g</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站,简写 hexo d</td></tr></tbody></table><p>d、<strong>server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server      </span><br><span class="line">启动服务器。默认情况下，访问网址为： http:&#x2F;&#x2F;localhost:4000&#x2F; </span><br><span class="line">简写 $ hexo  s</span><br></pre></td></tr></table></figure><p>e、<strong>version</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version      显示Hexo 版本</span><br></pre></td></tr></table></figure><h1 id="修改配置文件，关联github上"><a href="#修改配置文件，关联github上" class="headerlink" title="修改配置文件，关联github上"></a>修改配置文件，关联github上</h1><p>5.1、先创建github的仓库，仓库名称前缀要和你的github名一样，忽略我这里的大小写问题，</p><p><img src="https://i.loli.net/2020/06/29/inSqXzLpEA7ZDjW.png" alt="sshpath.png"></p><p>新建成功后，复制仓库的ssh地址，后续修改配置文件需要使用</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvaW5TcVh6THBFQTdaRGpXLnBuZw?x-oss-process=image/format,png" alt="sshpath.png"></p><p><strong>5.2、安装和切换主题，重点来了哦！！！</strong></p><p>首先我们要找到自己喜欢的主题，在github上面搜索hexo-them，比较受欢迎的是Next和yilia这两个主题，以Next主题为例，如果你喜欢其他主题，也可以设置相对应的主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>安装完成后可以看到themes文件夹下面多了一个ngxt的文件夹，这个就是我们下载的next主题</p><p>5.3、修改主题配置文件，需要懂一些yaml的语法知识，不懂得自行百度下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo/_config.yml     #这个文件是整个博客站点的配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: next                            #使用next主题,这个相当于一个主题切换控制开关</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:                                #将我们本地的代码部署到刚刚创建的仓库中</span><br><span class="line">  type: 'git'</span><br><span class="line">  repository: "git@github.com:pythonTaotao/pythonTaotao.github.io.git"</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改后在本地先测试一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvTm5tOTVkZTRmY0NnWjdrLnBuZw?x-oss-process=image/format,png" alt="nextzhuti.png"></p><p>激动人心的时刻到了，上面就是我们最原始的next主题的样子，这个博客在本地测试已经没有问题了，现在要把它部署到github上面</p><p>5.4、发布博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署完成后，在github的setting中 可以看到自己的博客地址</p><p><a href="https://sm.ms/image/MPj7NZW8LAX6HS1" target="_blank"><img src="https://i.loli.net/2020/06/29/MPj7NZW8LAX6HS1.png" alt="githubpasge.png"></a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>至于最后发布文章和自定义各种不同的主题，可自己去探索，至此所有的步骤都已经讲完，希望对你有所帮助。如遇到bug可留言。感谢阅读。下一节讲解如何美化我们搭建的hexo博客</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：搭建个人博客也是心血来潮，很久之前就看到别人的博客很清新、简约、大气、时尚又装逼，嘿嘿。。。就想着自己折腾一个，奈何当时技术能力有限，连github都玩不转，当然以失败告终，最近又头脑发热，遂百度了n多资料，又开始了填（bei）坑(nue）之旅，而且能找到的资料大多仅仅就是搭建起来，作为一个强迫症患者，肯定不能忍受没有优化过的样子，所以本着搭建一个完整的博客并记录优化过程，如果你喜欢我博客的样子，参考此教程一定能够搭建起来差不多的样子。&lt;/p&gt;
&lt;p&gt;我的博客：&lt;a href=&quot;https://pythontaotao.github.io/&quot;&gt;https://pythontaotao.github.io/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://pythontaotao.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://pythontaotao.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://pythontaotao.github.io/tags/next/"/>
    
      <category term="个人博客" scheme="https://pythontaotao.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pythontaotao.github.io/2020/06/28/hello-world/"/>
    <id>https://pythontaotao.github.io/2020/06/28/hello-world/</id>
    <published>2020-06-28T11:25:26.318Z</published>
    <updated>2020-06-28T11:25:26.318Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>测试修改功能<br>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>proxmox（pve）安装Win10系统虚拟机</title>
    <link href="https://pythontaotao.github.io/2020/06/26/proxmox-pve-%E5%AE%89%E8%A3%85Win10%E7%B3%BB%E7%BB%9F/"/>
    <id>https://pythontaotao.github.io/2020/06/26/proxmox-pve-%E5%AE%89%E8%A3%85Win10%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-06-27T00:16:10.000Z</published>
    <updated>2020-06-28T11:24:30.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装proxmox-ve"><a href="#安装proxmox-ve" class="headerlink" title="安装proxmox ve"></a>安装proxmox ve</h2><p>Proxmox VE是一个完整的企业虚拟化开源平台。借助内置的Web界面，您可以轻松管理虚拟机和容器，软件定义的存储和网络，高可用性集群以及单个解决方案上的多个现成工具。</p><a id="more"></a><p>官网地址：<a href="https://www.proxmox.com/en/downloads" target="_blank" rel="noopener">点击这里</a></p><p>中文社区：<a href="http://download.proxmox.wiki/iso/" target="_blank" rel="noopener">点击这里</a></p><p>科大镜像源：<a href="https://mirrors.ustc.edu.cn/proxmox/" target="_blank" rel="noopener">点击这里</a></p><p>官网地址较慢，可以选择其他两个镜像源下载<br><img src="https://i.loli.net/2020/06/28/sFmBqhRXHiJf3Vu.png" alt="pve官网下载地址截图.png"></p><h2 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h2><p>下载Rufus：<a href="http://rufus.ie/" target="_blank" rel="noopener">点击直达</a></p><p><img src="https://i.loli.net/2020/06/28/GPWf4KJa57lFz9s.png" alt="rufus界面.png"></p><p>Boot selection选择下载的proxmox ve的ISO镜像文件，Device选择自己的U盘，点击开始</p><p>制作完成后插到服务器启动，需提在服务器的BISO开启<strong>Inter-VT的虚拟化</strong>功能</p><h2 id="安装proxmox-ve-1"><a href="#安装proxmox-ve-1" class="headerlink" title="安装proxmox ve"></a>安装proxmox ve</h2><p>启动服务器，启动项选择U盘启动，即可进入下面界面</p><p><img src="https://i.loli.net/2020/06/28/JlKpT65M38F9ubj.png" alt="pve安装界面1.png"></p><p><img src="https://i.loli.net/2020/06/28/18v5qVbJ37nzirL.png" alt="pve安装设置时区.png"></p><p>然后输入管理员密码、设置主机名、IP地址、掩码和DNS，安装等待几分钟，具体时间根据机器配置而定，安装完成后会自动重启服务器，登录服务器的shell界面，和普通的linux系统一样</p><p>web控制台访问URL： http://&lt;ip地址&gt;:8006</p><p>用户名：root<br>密码: <code>your_passwd</code></p><p><img src="https://i.loli.net/2020/06/28/cUkravqmPx6XwZH.png" alt="pve的web登陆界面.png"></p><h2 id="通过pve安装Win10系统"><a href="#通过pve安装Win10系统" class="headerlink" title="通过pve安装Win10系统"></a>通过pve安装Win10系统</h2><ul><li>​      win10镜像文件  </li><li>​      virtual io win 驱动</li></ul><p>virtual io win 驱动下载地址：<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/" target="_blank" rel="noopener">点击直达</a>  具体版本的话最新的可以使用</p><p>如果这个地址下载太慢的话可以使用IDM下载，了解更多：<a href="https://www.52pojie.cn/thread-1013874-1-1.html" target="_blank" rel="noopener">点击直达</a></p><h4 id="上传镜像到pve"><a href="#上传镜像到pve" class="headerlink" title="上传镜像到pve"></a>上传镜像到pve</h4><p>数据中心——&gt; local存储——&gt; 内容——&gt; 上传——&gt; ISO镜像</p><p>或者直接FTP上传到<code>/var/lib/vz/template/iso</code>该目录下</p><p>需要上传win10镜像和virtual io win驱动</p><p><img src="https://i.loli.net/2020/06/28/2FxzvSNYR4yHWJw.png" alt="上传完镜像截图.png"></p><h4 id="创建win10虚拟机"><a href="#创建win10虚拟机" class="headerlink" title="创建win10虚拟机"></a>创建win10虚拟机</h4><p><img src="https://i.loli.net/2020/06/28/kVYp4ZW3jsw7Sze.png" alt="win10虚拟机硬件配置.png"></p><p>然后点击<strong>启动</strong>，即可看到下面的界面，一步一步进行安装即可</p><p><img src="https://i.loli.net/2020/06/28/KibldAOo2ThyRer.png" alt="启动win10界面.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装proxmox-ve&quot;&gt;&lt;a href=&quot;#安装proxmox-ve&quot; class=&quot;headerlink&quot; title=&quot;安装proxmox ve&quot;&gt;&lt;/a&gt;安装proxmox ve&lt;/h2&gt;&lt;p&gt;Proxmox VE是一个完整的企业虚拟化开源平台。借助内置的Web界面，您可以轻松管理虚拟机和容器，软件定义的存储和网络，高可用性集群以及单个解决方案上的多个现成工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://pythontaotao.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="proxmox" scheme="https://pythontaotao.github.io/tags/proxmox/"/>
    
      <category term="pve" scheme="https://pythontaotao.github.io/tags/pve/"/>
    
      <category term="win10" scheme="https://pythontaotao.github.io/tags/win10/"/>
    
      <category term="虚拟化" scheme="https://pythontaotao.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
</feed>
